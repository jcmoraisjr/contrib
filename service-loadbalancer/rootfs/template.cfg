# This file uses golang text templates (http://golang.org/pkg/text/template/) to
# dynamically configure the haproxy loadbalancer.
global
    daemon
    stats socket /tmp/haproxy
    server-state-file global       
    server-state-base /var/state/haproxy/

{{ if eq .startSyslog "true" }}
    # log using a syslog socket
    log /var/run/haproxy.log.socket local0 info
    log /var/run/haproxy.log.socket local0 notice
{{ end }}
{{ if ne .syslogEndpoint "" }}
    log {{ .syslogEndpoint }} local0 info
    log {{ .syslogEndpoint }} local0 notice
{{ end }}

{{ if ne .sslCert "" }}
    ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK
    ssl-default-bind-options no-tls-tickets
{{ end }}

defaults
    log global
   
    load-server-state-from-file global
    
    # Enable session redistribution in case of connection failure.
    option redispatch
    
    # Disable logging of null connections (haproxy connections like checks). 
    # This avoids excessive logs from haproxy internals.
    option dontlognull
    
    # Enable HTTP connection closing on the server side.
    option http-server-close

    # Enable insertion of the X-Forwarded-For header to requests sent to 
    # servers and keep client IP address.
    option forwardfor
    
    # Enable HTTP keep-alive from client to server.
    option http-keep-alive

    # Clients should send their full http request in 5s.
    timeout http-request    5s
    
    # Maximum time to wait for a connection attempt to a server to succeed.
    timeout connect         5s

    # Maximum inactivity time on the client side.
    # Applies when the client is expected to acknowledge or send data.
    timeout client          50s

    # Inactivity timeout on the client side for half-closed connections.
    # Applies when the client is expected to acknowledge or send data 
    # while one direction is already shut down.
    timeout client-fin      50s
    
    # Maximum inactivity time on the server side.
    timeout server          50s
    
    # timeout to use with WebSocket and CONNECT
    timeout tunnel          1h
    
    # Maximum allowed time to wait for a new HTTP request to appear.
    timeout http-keep-alive 60s

    # default traffic mode is http
    # mode is overwritten in case of tcp services
    mode http

    # default default_backend. This allows custom default_backend in frontends
    default_backend default-backend

backend default-backend
    server localhost 127.0.0.1:8081

# haproxy stats, required hostport and firewall rules for :1936
listen stats
    bind *:1936
    stats enable
    stats hide-version
    stats realm Haproxy\ Statistics
    stats uri /
    no log

{{ if ne .sslCert "" }}
{{ if .sslVerifyCert }}
frontend tcpfrontend
    bind :443
    mode tcp
    option tcplog

    tcp-request inspect-delay 5s
    tcp-request content accept if { req.ssl_hello_type 1 }
{{range $i, $svc := .services.httpsTerm}}
    {{ if $svc.VerifyCertHost }}use_backend tcpbackend_clicert_{{ $svc.VerifyFrontend }} if { req.ssl_sni -i {{ $svc.VerifyCertHost }} }{{end}}{{end}}

    default_backend tcpbackend

backend tcpbackend
    mode tcp
    server ssl 127.0.0.1:8443

{{range $i, $frontend := .frontends}}
backend tcpbackend_clicert_{{$frontend.Name}}
    mode tcp
    server ssl_clicert_{{$frontend.Name}} 127.0.0.1:{{$frontend.Port}}{{end}}
{{ end }}

frontend httpsfrontend
    mode http
    bind {{ if .sslVerifyCert }}127.0.0.1:8443{{else}}:443{{end}} ssl {{ .sslCert }}{{range $i, $svc := .services.httpsTerm}}{{if ne $svc.SslCertFile ""}} crt {{$svc.SslCertFile}}{{end}}{{end}} no-sslv3
    option httplog
    {{ if ne .httpLogFormat "" }}log-format {{ .httpLogFormat }}{{ end }}
    # HSTS (15768000 seconds = 6 months)
    rspadd  Strict-Transport-Security:\ max-age=15768000
{{range $i, $svc := .services.httpsTerm}}
    {{ if $svc.Host }}use_backend {{$svc.Name}} if { hdr(host) {{$svc.Host}} }{{end}}{{end}}
{{end}}
{{ if .sslVerifyCert }}{{ $crt := .sslCert }}{{ $httpsTerm := .services.httpsTerm }}{{range $i, $frontend := .frontends}}
frontend httpsfrontend_clicert_{{$frontend.Name}}
    mode http
    bind 127.0.0.1:{{$frontend.Port}} ssl verify required {{ $crt }} ca-file {{$frontend.CaCert}}{{range $i, $svc := $httpsTerm}}{{if and (ne $svc.SslCertFile "") (eq $frontend.Name $svc.VerifyFrontend)}} crt {{$svc.SslCertFile}}{{end}}{{end}} no-sslv3
    option httplog
    {{ if ne .httpLogFormat "" }}log-format {{ .httpLogFormat }}{{ end }}

    # HSTS (15768000 seconds = 6 months)
    rspadd  Strict-Transport-Security:\ max-age=15768000
    http-request set-var(txn.host) req.hdr(host)
{{range $i, $svc := $httpsTerm}}{{if eq $svc.VerifyFrontend $frontend.Name}}
    {{ if $svc.VerifyCertHost }}rspirep ^(set-cookie:\ .*) \1;\ Domain={{$svc.Host}} if { var(txn.host) {{$svc.VerifyCertHost}} }
    use_backend {{$svc.Name}} if { hdr(host) {{$svc.VerifyCertHost}} }{{end}}{{end}}
{{end}}{{end}}{{end}}

frontend httpfrontend
    bind *:80
    option httplog
    {{ if ne .httpLogFormat "" }}log-format {{ .httpLogFormat }}{{ end }}
{{ if ne .sslCert "" }}{{range $i, $svc := .services.httpsTerm}}
    {{ if $svc.Host }}redirect scheme https if { hdr(host) {{$svc.Host}} }{{end}}{{end}}
{{end}}
{{range $i, $svc := .services.http}}
    {{ if $svc.Host }}use_backend {{$svc.Name}} if { hdr(host) {{$svc.Host}} }{{end}}{{end}}

{{ $inter := .intervalHealthCheck }}{{range $i, $svc := .services.http}}{{ $svcName := $svc.Name }}
backend {{$svc.Name}}
    {{if $svc.UseHTTPCheck }}option httpchk{{end}}
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

    balance {{$svc.Algorithm}}
{{if and $svc.SessionAffinity (not $svc.CookieStickySession)}}
    # create a stickiness table using client IP address as key
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#stick-table
    stick-table type ip size 100k expire 30m
    stick on src
    {{range $j, $ep := $svc.Ep}}server {{$ep}} {{$ep}} check port {{$svc.BackendPort}} inter {{ $inter }}
    {{end}}
{{end}}
{{if and $svc.SessionAffinity $svc.CookieStickySession}}
    # insert a cookie with name SERVERID to stick a client with a backend server
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4.2-cookie
    cookie SERVERID insert indirect nocache
    {{range $j, $ep := $svc.Ep}}server {{$ep}} {{$ep}} cookie s{{$j}} check port {{$svc.BackendPort}} inter {{ $inter }}
    {{end}}
{{end}}
{{if and (not $svc.SessionAffinity) (not $svc.CookieStickySession)}}
    {{range $j, $ep := $svc.Ep}}server {{$ep}} {{$ep}} check port {{$svc.BackendPort}} inter {{ $inter }}
    {{end}}
{{end}}
{{end}}

{{range $i, $svc := .services.httpsTerm}}
{{ $svcName := $svc.Name }}
backend {{$svc.Name}}
    {{if $svc.UseHTTPCheck }}option httpchk{{end}}
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

    balance {{$svc.Algorithm}}
    http-request set-header X-Forwarded-Proto https
{{if and $svc.SessionAffinity (not $svc.CookieStickySession)}}
    # create a stickiness table using client IP address as key
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#stick-table
    stick-table type ip size 100k expire 30m
    stick on src
    {{range $j, $ep := $svc.Ep}}server {{$ep}} {{$ep}} check port {{$svc.BackendPort}} inter {{ $inter }}
    {{end}}
{{end}}
{{if and $svc.SessionAffinity $svc.CookieStickySession}}
    # insert a cookie with name SERVERID to stick a client with a backend server
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#4.2-cookie
    cookie SERVERID insert indirect nocache
    {{range $j, $ep := $svc.Ep}}server {{$ep}} {{$ep}} cookie s{{$j}} check port {{$svc.BackendPort}} inter {{ $inter }}
    {{end}}
{{end}}
{{if and (not $svc.SessionAffinity) (not $svc.CookieStickySession)}}
    {{range $j, $ep := $svc.Ep}}server {{$ep}} {{$ep}} check port {{$svc.BackendPort}} inter {{ $inter }}
    {{end}}
{{end}}
{{end}}

{{range $i, $svc := .services.tcp}}
{{ $svcName := $svc.Name }}
frontend {{$svc.Name}}
    bind *:{{$svc.FrontendPort}}
    mode tcp
    option tcplog
    {{ if ne .tcpLogFormat "" }}log-format {{ .tcpLogFormat }}{{ end }}
    default_backend {{$svc.Name}}

backend {{$svc.Name}}
    balance {{$svc.Algorithm}}
    mode tcp
{{if $svc.SessionAffinity}}
    # create a stickiness table using client IP address as key
    # http://cbonte.github.io/haproxy-dconv/configuration-1.5.html#stick-table
    stick-table type ip size 100k expire 30m
    stick on src    
{{end}}
    {{range $j, $ep := $svc.Ep}}server {{$ep}} {{$ep}} check port {{$svc.BackendPort}} inter {{ $inter }}
    {{end}}
{{end}}
